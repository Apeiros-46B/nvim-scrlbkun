*scrlbkun.txt*  A scrollbar plugin for neovim.

Version: 1.0.0
Author: kensyo <takitatateokowa at gmail.com>
License: MIT

==============================================================================
CONTENTS                                   *scrlbkun-contents*

INTRODUCTION                               |scrlbkun-introduction|
SETUP                                      |scrlbkun-setup|
CONFIGURATION                              |scrlbkun-config|
  DEFAULT                                    |scrlbkun-config-default|
  FIELDS                                     |scrlbkun-config-fields|
HIGHLIGHTING                               |scrlbkun-highlighting|
FUNCTIONS                                  |scrlbkun-functions|


==============================================================================
INTRODUCTION                               *scrlbkun-introduction*

*scrlbkun* is a scrollbar plugin for neovim.

|scrlbkun| enables neovim to display the following components at the right edge
of windows.

* Scrollbar
* Cursor position
* Positions of matched terms in the search mode (the `'hlsearch'` option must be on)
* Positions of diagnostics results
* Positions of git hunks (requires [gitsigns](https://github.com/lewis6991/gitsigns.nvim))

|scrlbkun| requires Neovim >= 0.7.0.

==============================================================================
SETUP                                      *scrlbkun-setup*

To let |scrlbkun| work, invoke a setup function, |scrlbkun.setup()|.
>
    :lua require('scrlbkun').setup()
<
If you use your own configuration, pass a configuration table to the setup 
funciton like
>
    :lua require('scrlbkun').setup({
        single_window = false,
        cursor = {
            enable = false
        }
    })
<
==============================================================================
CONFIGURATION                              *scrlbkun-config*

------------------------------------------------------------------------------
DEFAULT                                    *scrlbkun-config-default*

If nothing is passed as an argument to |scrlbkun.setup()|, the following
table is implicitly passed.

>
    {
        single_window = true,
        zindex = 10,
        winblend = 40,
        excluded_filetypes = {"NvimTree"},
        excluded_buftypes = {"prompt"},
        fadeout_time = 2000,

        bar = {
            enable = true,
            draw_events = {"WinScrolled", "BufEnter", "FocusGained"},
            draw_events_tab = {"VimResized", "TabEnter"},
            priority = 100,
            sign = " ",
        },

        cursor = {
            enable = true,
            draw_events = {"BufEnter", "FocusGained", "CursorMoved"},
            draw_events_tab = {"VimResized", "TabEnter"},
            priority = 200,
            signs = {
                "▔",
                "━",
                "▁",
            },
            sign_arrangement = "skip_first"
        },

        search = {
            enable = true,
            draw_events = {},
            draw_events_tab = {
                "TextChanged",
                "TextChangedI",
                "TextChangedP",
                "TabEnter",
                {
                    "CmdlineLeave",
                    {"/", "\\?", ":"}
                },
                {
                    "CmdlineChanged",
                    {"/", "\\?"}
                },
            },
            priority = 500
            signs = {
                ".",
                ":",
            },
            use_built_in_signs = true,
        },

        diagnostics = {
            enable = true,
            draw_events = {},
            draw_events_tab = {"BufEnter", "DiagnosticChanged", "TabEnter"},
            priority = 400,
            signs = {
                ERROR = {".", ":"},
                WARN = {".", ":"},
                INFO = {".", ":"},
                HINT = {".", ":"},
            },
            use_built_in_signs = true,
        }

        githunks = {
            enable = true,
            draw_events = {},
            draw_events_tab = {"BufEnter", "TabEnter",
                "TextChanged", "TextChangedI", "TextChangedP"},
            priority = 300,
            signs = {
                add = {"│"},
                delete = {"▸"},
                change = {"│"},
            },
            use_built_in_signs = false,
        },
    }
<

------------------------------------------------------------------------------
FIELDS                                     *scrlbkun-config-fields*

This subsection describes each field of the configuration table which can be
passed to the setup function, |scrlbkun.setup()|.

General Fields~

single_window                              *scrlbkun-config.single_window*
----------------
If you want to display scrollbars on multiple windows, set to false.
If set to true, a scrollbar area comes out only on the current window.
Type: boolean (Default: true)

zindex                                     *scrlbkun-config.zindex*
----------------
zindex of scrollbar areas. See the parameters for |nvim_oepn_win()|.
Type: number (Default: 10)

winblend                                   *scrlbkun-config.winblend*
----------------
'winblend' of scrollbar areas.
Type: number (Default: 40)

excluded_filetypes                         *scrlbkun-config.excluded_filetypes*
----------------
On these filetypes, any scrollbars don't come out.
Type: table (Default: {"NvimTree"})

excluded_buftypes                          *scrlbkun-config.excluded_buftypes*
----------------
On these buftypes, any scrollbars don't come out.
Type: table (Default: {"prompt"})

fadeout_time                               *scrlbkun-config.fadeout_time*
----------------
Time until a scrollbar area is hidden. Specify in milliseconds.
If set to 0, a scrollbar area isn't hidden over time.
Type: number (Default: 2000)

Fields for the bar component~

bar.enable                                 *scrlbkun-config.bar.enable*
----------------
If set to true, the bar component is enabled.
Type: boolean (Default: true)

bar.draw_events                            *scrlbkun-config.bar.draw_events*
----------------
The bar component is drawn at these events.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"WinScrolled", "BufEnter", "FocusGained"})

bar.draw_events_tab                        *scrlbkun-config.bar.draw_events_tab*
----------------
The bar component is drawn on all the windows in the current tabpage
at these events. But if |scrlbkun-config.single_window| is set to true,
|scrlbkun-config.bar.draw_events_tab| is treated exactly the same as
|scrlbkun-config.bar.draw_events|.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"VimResized", "TabEnter"})

bar.priority                               *scrlbkun-config.bar.priority*
----------------
When components overlap, the one with the higher priority is drawn.
Specify by positive integer.
Type: number (Default: 100)

bar.sign                                   *scrlbkun-config.bar.sign*
----------------
A sign for a scrollbar. It is recommended not to change it from
the default empty symbol.
Type: string (Default: ' ')

Fields for the cursor component~

cursor.enable                              *scrlbkun-config.cursor.enable*
----------------
If set to true, the cursor component is enabled.
Type: boolean (Default: true)

cursor.draw_events                         *scrlbkun-config.cursor.draw_events*
----------------
The cursor component is drawn at these events.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"BufEnter", "FocusGained", "CursorMoved"})

cursor.draw_events_tab                     *scrlbkun-config.cursor.draw_events_tab*
----------------
The cursor component is drawn on all the windows in the current tabpage
at these events. But if |scrlbkun-config.single_window| is set to true,
|scrlbkun-config.cursor.draw_events_tab| is treated exactly the same as
|scrlbkun-config.cursor.draw_events|.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"VimResized", "TabEnter"})

cursor.priority                            *scrlbkun-config.cursor.priority*
----------------
When components overlap, the one with the higher priority is drawn.
Specify by positive integer.
Type: number (Default: 200)

cursor.signs                               *scrlbkun-config.cursor.signs*
----------------
Signs for a cursor. Specify in array. If you specify an array of n-elements,
then the sign to be used is determined in n more levels depending on the
cursor position.
Type: table (Default: {"▔", "━", "▁"})

cursor.sign_arrangement                    *scrlbkun-config.cursor.sign_arrangement*
----------------
How to determin the sign to be used. Specify "skip_first" or "normal".
To illustrate with the default configuration, "skip_first" would make the
sign shift like ▔━▁━▁━▁... as you move the cursor down, and "normal" would 
make the sign shift like ▔━▁▔━▁▔━▁....
Type: string (Default: "skip_first")

Fields for the search component~

search.enable                              *scrlbkun-config.search.enable*
----------------
If set to true, the search component is enabled.
Type: boolean (Default: true)

search.draw_events                         *scrlbkun-config.search.draw_events*
----------------
The search component is drawn at these events.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {})

search.draw_events_tab                     *scrlbkun-config.search.draw_events_tab*
----------------
The search component is drawn on all the windows in the current tabpage
at these events. But if |scrlbkun-config.single_window| is set to true,
|scrlbkun-config.search.draw_events_tab| is treated exactly the same as
|scrlbkun-config.search.draw_events|.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example, 
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {
    "TextChanged",
    "TextChangedI",
    "TextChangedP",
    "TabEnter",
    {
        "CmdlineLeave",
        {"/", "\\?", ":"}
    },
    {
        "CmdlineChanged",
        {"/", "\\?"}
    },
})

search.priority                            *scrlbkun-config.search.priority*
----------------
When components overlap, the one with the higher priority is drawn.
Specify by positive integer.
Type: number (Default: 500)

search.signs                               *scrlbkun-config.search.signs*
----------------
Signs for search results.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on the number of matched terms.
Type: table (Default: {".", ":"})

search.use_built_in_signs                  *scrlbkun-config.search.use_built_in_signs*
----------------
If set to true, the |scrlbkun-config.search.signs| field is ignored and
the plugin uses symbols and an algorithm that allow for just a little
more detailed drawing.
Type: boolean (Default: true)

Fields for the diagnostics component~

diagnostics.enable                         *scrlbkun-config.diagnostics.enable*
----------------
If set to true, the diagnostics component is enabled.
Type: boolean (Default: true)

diagnostics.draw_events                    *scrlbkun-config.diagnostics.draw_events*
----------------
The diagnostics component is drawn at these events.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {})

diagnostics.draw_events_tab                *scrlbkun-config.diagnostics.draw_events_tab*
----------------
The diagnostics component is drawn on all the windows in the current tabpage
at these events. But if |scrlbkun-config.single_window| is set to true,
|scrlbkun-config.diagnostics.draw_events_tab| is treated exactly the same as
|scrlbkun-config.diagnostics.draw_events|.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"BufEnter", "DiagnosticChanged", "TabEnter"})

diagnostics.priority                       *scrlbkun-config.diagnostics.priority*
----------------
When components overlap, the one with the higher priority is drawn.
Specify by positive integer.
Type: number (Default: 400)

diagnostics.signs.ERROR                    *scrlbkun-config.diagnostics.signs.ERROR*
----------------
Signs for ERROR diagnostics.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on the number of error diagnostics.
Type: table (Default: {".", ":"})

diagnostics.signs.WARN                     *scrlbkun-config.diagnostics.signs.WARN*
----------------
Signs for WARN diagnostics.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on the number of warning diagnostics.
Type: table (Default: {".", ":"})

diagnostics.signs.INFO                     *scrlbkun-config.diagnostics.signs.INFO*
----------------
Signs for INFO diagnostics.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on the number of info diagnostics.
Type: table (Default: {".", ":"})

diagnostics.signs.HINT                     *scrlbkun-config.diagnostics.signs.HINT*
----------------
Signs for HINT diagnostics.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on the number of hint diagnostics.
Type: table (Default: {".", ":"})

diagnostics.use_built_in_signs             *scrlbkun-config.diagnostics.use_built_in_signs*
----------------
If set to true, the scrlbkun-config.diagnostics.signs.{ERROR, WARN, INFO, HINT}
fields are ignored and the plugin uses symbols and an algorithm that allow 
for just a little more detailed drawing.
Type: boolean (Default: true)

Fields for the githunks component~

githunks.enable                            *scrlbkun-config.githunks.enable*
----------------
If set to true, the githunks component is enabled.
Type: boolean (Default: true)

githunks.draw_events                       *scrlbkun-config.githunks.draw_events*
----------------
The githunks component is drawn at these events.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {})

githunks.draw_events_tab                   *scrlbkun-config.githunks.draw_events_tab*
----------------
The githunks component is drawn on all the windows in the current tabpage
at these events. But if |scrlbkun-config.single_window| is set to true,
|scrlbkun-config.githunks.draw_events_tab| is treated exactly the same as
|scrlbkun-config.githunks.draw_events|.
If you want to specify patterns as well, specify them as an array
{event_name(string), patterns(string|array)}. For example,
{"CmdlineLeave", {"/", "\\?"}}.
Type: table (Default: {"BufEnter", "TabEnter",
                    "TextChanged", "TextChangedI", "TextChangedP"})

githunks.priority                          *scrlbkun-config.githunks.priority*
----------------
When components overlap, the one with the higher priority is drawn.
Specify by positive integer.
Type: number (Default: 300)

githunks.signs.add                         *scrlbkun-config.githunks.signs.add*
----------------
Signs for add-hunks.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on add-hunks length.
Type: table (Default: {"│"})

githunks.signs.delete                      *scrlbkun-config.githunks.signs.delete*
----------------
Signs for delete-hunks.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on delete-hunks length.
Type: table (Default: {"▸"})

githunks.signs.change                      *scrlbkun-config.githunks.signs.change*
----------------
Signs for change-hunks.
If you specify an array of n-elements, then the sign to be used is determined
in n more levels depending on change-hunks length.
Type: table (Default: {"│"})

githunks.use_built_in_signs                *scrlbkun-config.githunks.use_built_in_signs*
----------------
If set to true, the scrlbkun-config.githunks.signs.{add, delete, change}
fields are ignored and the plugin uses symbols and an algorithm that allow 
for just a little more detailed drawing.
Type: boolean (Default: false)

==============================================================================
HIGHLIGHTING                               *scrlbkun-highlighting*

You can configure the following highlights.

ScrlbkunBar                                *scrlbkun-highlighting-ScrlbkunBar*
ScrlbkunCursor                             *scrlbkun-highlighting-ScrlbkunCursor*
ScrlbkunSearch                             *scrlbkun-highlighting-ScrlbkunSearch*
ScrlbkunDiagnosticsError                   *scrlbkun-highlighting-ScrlbkunDiagnosticsError*
ScrlbkunDiagnosticsWarn                    *scrlbkun-highlighting-ScrlbkunDiagnosticsWarn*
ScrlbkunDiagnosticsInfo                    *scrlbkun-highlighting-ScrlbkunDiagnosticsInfo*
ScrlbkunDiagnosticsHint                    *scrlbkun-highlighting-ScrlbkunDiagnosticsHint*
ScrlbkunGithunksAdd                        *scrlbkun-highlighting-ScrlbkunGithunksAdd*
ScrlbkunGithunksDelete                     *scrlbkun-highlighting-ScrlbkunGithunksDelete*
ScrlbkunGithunksChange                     *scrlbkun-highlighting-ScrlbkunGithunksChange*

==============================================================================
FUNCTIONS                                  *scrlbkun-functions*

Lua functions to switch between enable and disable are provided.

Enabling functions~
                                           *scrlbkun-functions.components.enable_all()*
require('scrlbkun.components').enable_all() 
----------------
All the components are enabled.

                                           *scrlbkun-functions.components.bar.enable()*
require('scrlbkun.components.bar').enable()
----------------
The bar components is enabled.

                                           *scrlbkun-functions.components.cursor.enable()*
require('scrlbkun.components.cursor').enable()
----------------
The cursor components is enabled.

                                           *scrlbkun-functions.components.search.enable()*
require('scrlbkun.components.search').enable()
----------------
The search components is enabled.

                                           *scrlbkun-functions.components.diagnostics.enable()*
require('scrlbkun.components.diagnostics').enable()
----------------
The diagnostics components is enabled.

                                           *scrlbkun-functions.components.githunks.enable()*
require('scrlbkun.components.githunks').enable()
----------------
The githunks components is enabled.


Disabling functions~
                                           *scrlbkun-functions.components.disable_all()*
require('scrlbkun.components').disable_all() 
----------------
All the components are disabled.

                                           *scrlbkun-functions.components.bar.disable()*
require('scrlbkun.components.bar').disable()
----------------
The bar components is disabled.

                                           *scrlbkun-functions.components.cursor.disable()*
require('scrlbkun.components.cursor').disable()
----------------
The cursor components is disabled.

                                           *scrlbkun-functions.components.search.disable()*
require('scrlbkun.components.search').disable()
----------------
The search components is disabled.

                                           *scrlbkun-functions.components.diagnostics.disable()*
require('scrlbkun.components.diagnostics').disable()
----------------
The diagnostics components is disabled.

                                           *scrlbkun-functions.components.githunks.disable()*
require('scrlbkun.components.githunks').disable()
----------------
The githunks components is disabled.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl

